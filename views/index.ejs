<!--mapbox that adds markers through socket.io connection to api/locations-->
<!DOCTYPE html>
<html>

<head>
  <title>GPS Tracker</title>
  <meta charset='utf-8' />
  <meta name='viewport' content='width=device-width, initial-scale=1' />
  <script src="https://cdn.socket.io/4.7.2/socket.io.min.js"></script>
  <script src='https://api.tiles.mapbox.com/mapbox-gl-js/v1.2.0/mapbox-gl.js'></script>
  <script src="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-draw/v1.4.3/mapbox-gl-draw.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@turf/turf@6/turf.min.js"></script>
  <link rel='stylesheet' href='https://api.tiles.mapbox.com/mapbox-gl-js/v1.2.0/mapbox-gl.css' />
  <link rel="stylesheet" href="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-draw/v1.4.3/mapbox-gl-draw.css"
    type="text/css">
  <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
  <style>
    body {
      margin: 0;
      padding: 0;
    }

    #map {
      position: absolute;
      top: 50px;
      bottom: 0;
      width: -webkit-fill-available;
    }

    .menu {
      position: absolute;
      left: 0px;
      bottom: 0px;
      z-index: 10;
      background: #efefef;
      padding: 0px;
      font-family: 'Open Sans', sans-serif;
    }

    .menu-btn {
      background-color: inherit;
      color: inherit;
      font: inherit;
      cursor: pointer;
      border: none;
      height: inherit;
    }

    .menu-btn:hover {
      background: #5c5c5c;
    }

    .menu-item {
      cursor: pointer;
      padding: 20px;
    }

    .menu-item:hover {
      background: #5c5c5c;
    }

    .mapboxgl-marker {
      cursor: help;
    }

    .mapboxgl-popup-content {
      padding: 15px 18px 10px;
    }

    .mapboxgl-popup-content {
      word-wrap: break-word
    }

    .sidebar {
      background-color: #333;
      color: #efefef;
      height: 50px;
      font-size: 30px;
      line-height: 1.5;
    }

    #burgerSidebar {
      position: absolute;
      right: 0px;
      top: 50px;
      z-index: 10;
      background: #efefef;
      padding: 10px;
      font-family: 'Open Sans', sans-serif;
    }

    .styled-table {
      table-layout: fixed;
      border-collapse: collapse;
      margin: 25px 0;
      font-size: 0.9em;
      font-family: sans-serif;
      width: 100%;
      box-shadow: 0 0 20px rgba(0, 0, 0, 0.15);
    }

    .styled-table thead tr {
      background-color: #3f51b5;
      color: #ffffff;
      text-align: left;
    }

    .styled-table th,
    .styled-table td {
      padding: 10px 5px;
      display: table-cell
    }

    .styled-table tbody tr {
      border-bottom: 1px solid #dddddd;
    }

    .styled-table td {
      border: 1px solid #dddddd;
      /* word-wrap: break-word; */
      text-overflow: ellipsis;
    }

    .styled-table tbody tr.active-row {
      font-weight: bold;
      color: #3f51b5;
    }

    /* css to create a centre card for modal-content */
    .modal {
      display: none;
      position: fixed;
      z-index: 1;
      padding-top: 100px;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      overflow: auto;
      background-color: rgb(0, 0, 0);
      background-color: rgba(0, 0, 0, 0.4);
    }

    .modal-content {
      background-color: #fefefe;
      margin: 5% auto;
      padding: 20px;
      border: 1px solid #888;
      display: table;
    }

    .modal-content input[type="submit"] {
      width: -webkit-fill-available;
      margin-top: 10px;
      border: 0px;
      cursor: pointer;
      text-transform: uppercase;
      padding: 6px 16px;
      border-radius: 4px;
      transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms, box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms, border-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms, color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;
      color: rgb(255, 255, 255);
      background-color: rgb(25, 118, 210);
      box-shadow: rgba(0, 0, 0, 0.2) 0px 3px 1px -2px, rgba(0, 0, 0, 0.14) 0px 2px 2px 0px, rgba(0, 0, 0, 0.12) 0px 1px 5px 0px;
    }

    .modal-content select {
      width: -webkit-fill-available;
    }

    .right {
      float: right;
    }

    .material-icons {
      cursor: pointer;
    }


    @keyframes pulse-ring {
      0% {
        transform: scale(1);
        opacity: 1;
      }

      100% {
        transform: scale(3);
        opacity: 0;
      }
    }
  </style>
</head>

<body>
  <!-- add sidebar with burger icon -->
  <div id="navbar" class="sidebar">
    <button class="menu-btn" id="openNav" onclick="toggleBurger()">â˜°</button>
  </div>
  <!-- add sidebar to display all boundaries -->
  <div id="burgerSidebar" class="menu" style="display: none;">
    <h3 style="padding-left:10px">Workers</h3>
    <Table class="styled-table">
      <thead>
        <tr>
          <td>Name</td>
          <td style="width: 50%;">Last Updated</td>
          <td style="width: 24px;"></td>
        </tr>
      </thead>
      <tbody id="workers">

      </tbody>
    </Table>
    <h3 style="padding-left:10px">Boundaries</h3>
    <Table class="styled-table">
      <thead>
        <tr>
          <td style="width: 27px;">ID</td>
          <td>Alarm Type</td>
          <td>Alarm Distance</td>
          <td style="width: 24px;"></td>
        </tr>
      </thead>
      <tbody id="boundaries">

      </tbody>
    </Table>
  </div>
  <div id="main">
    <div id='map'></div>
    <div id="menu" class="menu map-legend" style="margin-bottom: 2rem;">
      <input type="radio" name="mapToggle" id="satellite-streets-v11" value="satellite-streets-v11" checked>
      <label for="satellite-streets-v11">Satelite</label>
      <input type="radio" name="mapToggle" id="streets-v11" value="streets-v11">
      <label for="streets-v11">Streets</label>
      <input type="radio" name="mapToggle" id="dark-v11" value="dark-v11">
      <label for="dark-v11">Dark</label>
    </div>
    <div class="menu map-legend" style="margin-bottom: 4rem;">
      <input type="checkbox" name="autoZoom" id="autoZoom">
      <label for="autoZoom">Auto Zoom</label>
    </div>
  </div>

  <script>
    mapboxgl.accessToken = 'pk.eyJ1IjoiZWR1YXJkLW9obWlvIiwiYSI6ImNsdm40YTVhbzBhMjcyd3A5NGRrbjVqbmYifQ.Y8XiZY6pJZb2NZRXRjHlHg';
    var map = new mapboxgl.Map({
      container: 'map',
      style: 'mapbox://styles/mapbox/satellite-streets-v11',
      center: [174.762188, -36.848497],
      zoom: 15,
    });

    const draw = new MapboxDraw({
      displayControlsDefault: false,
      userProperties: true,
      // Select which mapbox-gl-draw control buttons to add to the map.
      controls: {
        line_string: true,
        polygon: true,
        trash: true
      },
      styles: [{
        'id': 'gl-draw-polygon-fill-inactive',
        'type': 'fill',
        'filter': ['all', ['==', 'active', 'false'],
          ['==', '$type', 'Polygon'],
          ['!=', 'mode', 'static']
        ],
        'paint': {
          'fill-color': ["case",
            ['==', ['get', "user_alarmType"], "nearBoundary"], "red",
            ['==', ['get', "user_alarmType"], "outsideBoundary"], "#3FB1CE",
            '#ff0000'
          ],
          'fill-outline-color': '#3FB1CE',
          'fill-opacity': 0.3
        }
      },
      {
        'id': 'gl-draw-polygon-fill-active',
        'type': 'fill',
        'filter': ['all', ['==', 'active', 'true'],
          ['==', '$type', 'Polygon']
        ],
        'paint': {
          'fill-color': '#fbb03b',
          'fill-outline-color': '#fbb03b',
          'fill-opacity': 0.1
        }
      },
      {
        'id': 'gl-draw-polygon-midpoint',
        'type': 'circle',
        'filter': ['all', ['==', '$type', 'Point'],
          ['==', 'meta', 'midpoint']
        ],
        'paint': {
          'circle-radius': 3,
          'circle-color': '#fbb03b'
        }
      },
      {
        'id': 'gl-draw-polygon-stroke-inactive',
        'type': 'line',
        'filter': ['all', ['==', 'active', 'false'],
          ['==', '$type', 'Polygon'],
          ['!=', 'mode', 'static']
        ],
        'layout': {
          'line-cap': 'round',
          'line-join': 'round'
        },
        'paint': {
          'line-color': '#3bb2d0',
          'line-width': 2
        }
      },
      {
        'id': 'gl-draw-polygon-stroke-active',
        'type': 'line',
        'filter': ['all', ['==', 'active', 'true'],
          ['==', '$type', 'Polygon']
        ],
        'layout': {
          'line-cap': 'round',
          'line-join': 'round'
        },
        'paint': {
          'line-color': '#fbb03b',
          'line-dasharray': [0.2, 2],
          'line-width': 2
        }
      },
      {
        'id': 'gl-draw-line-inactive',
        'type': 'line',
        'filter': ['all', ['==', 'active', 'false'],
          ['==', '$type', 'LineString'],
          ['!=', 'mode', 'static']
        ],
        'layout': {
          'line-cap': 'round',
          'line-join': 'round'
        },
        'paint': {
          'line-color': '#3bb2d0',
          'line-width': 2
        }
      },
      {
        'id': 'gl-draw-line-active',
        'type': 'line',
        'filter': ['all', ['==', '$type', 'LineString'],
          ['==', 'active', 'true']
        ],
        'layout': {
          'line-cap': 'round',
          'line-join': 'round'
        },
        'paint': {
          'line-color': '#fbb03b',
          'line-dasharray': [0.2, 2],
          'line-width': 2
        }
      },
      {
        'id': 'gl-draw-polygon-and-line-vertex-stroke-inactive',
        'type': 'circle',
        'filter': ['all', ['==', 'meta', 'vertex'],
          ['==', '$type', 'Point'],
          ['!=', 'mode', 'static']
        ],
        'paint': {
          'circle-radius': 5,
          'circle-color': '#fff'
        }
      },
      {
        'id': 'gl-draw-polygon-and-line-vertex-inactive',
        'type': 'circle',
        'filter': ['all', ['==', 'meta', 'vertex'],
          ['==', '$type', 'Point'],
          ['!=', 'mode', 'static']
        ],
        'paint': {
          'circle-radius': 3,
          'circle-color': '#fbb03b'
        }
      },
      {
        'id': 'gl-draw-point-point-stroke-inactive',
        'type': 'circle',
        'filter': ['all', ['==', 'active', 'false'],
          ['==', '$type', 'Point'],
          ['==', 'meta', 'feature'],
          ['!=', 'mode', 'static']
        ],
        'paint': {
          'circle-radius': 5,
          'circle-opacity': 1,
          'circle-color': '#fff'
        }
      },
      {
        'id': 'gl-draw-point-inactive',
        'type': 'circle',
        'filter': ['all', ['==', 'active', 'false'],
          ['==', '$type', 'Point'],
          ['==', 'meta', 'feature'],
          ['!=', 'mode', 'static']
        ],
        'paint': {
          'circle-radius': 3,
          'circle-color': '#3bb2d0'
        }
      },
      {
        'id': 'gl-draw-point-stroke-active',
        'type': 'circle',
        'filter': ['all', ['==', '$type', 'Point'],
          ['==', 'active', 'true'],
          ['!=', 'meta', 'midpoint']
        ],
        'paint': {
          'circle-radius': 7,
          'circle-color': '#fff'
        }
      },
      {
        'id': 'gl-draw-point-active',
        'type': 'circle',
        'filter': ['all', ['==', '$type', 'Point'],
          ['!=', 'meta', 'midpoint'],
          ['==', 'active', 'true']
        ],
        'paint': {
          'circle-radius': 5,
          'circle-color': '#fbb03b'
        }
      },
      {
        'id': 'gl-draw-polygon-fill-static',
        'type': 'fill',
        'filter': ['all', ['==', 'mode', 'static'],
          ['==', '$type', 'Polygon']
        ],
        'paint': {
          'fill-color': '#404040',
          'fill-outline-color': '#404040',
          'fill-opacity': 0.1
        }
      },
      {
        'id': 'gl-draw-polygon-stroke-static',
        'type': 'line',
        'filter': ['all', ['==', 'mode', 'static'],
          ['==', '$type', 'Polygon']
        ],
        'layout': {
          'line-cap': 'round',
          'line-join': 'round'
        },
        'paint': {
          'line-color': '#404040',
          'line-width': 2
        }
      },
      {
        'id': 'gl-draw-line-static',
        'type': 'line',
        'filter': ['all', ['==', 'mode', 'static'],
          ['==', '$type', 'LineString']
        ],
        'layout': {
          'line-cap': 'round',
          'line-join': 'round'
        },
        'paint': {
          'line-color': '#404040',
          'line-width': 2
        }
      },
      {
        'id': 'gl-draw-point-static',
        'type': 'circle',
        'filter': ['all', ['==', 'mode', 'static'],
          ['==', '$type', 'Point']
        ],
        'paint': {
          'circle-radius': 5,
          'circle-color': '#404040'
        }
      }]
    });

    // Add zoom and rotation controls to the map.
    map.addControl(new mapboxgl.NavigationControl());
    map.addControl(draw);

    FetchAndDrawAllBoundaries();

    map.on('draw.create', createArea);
    map.on('draw.update', updateArea);
    map.on('draw.delete', deleteArea);

    function createArea(e) {
      // const id = prompt('Please enter a id for the feature');
      e.features[0].properties.id = e.features[0].id;
      e.features[0].id = e.features[0].id;
      e.features[0].properties.active = false;
      e.features[0].properties.type = '$B';
      draw.add(e.features[0]);

      // convert to linestring to save
      if (e.features[0].geometry.type == 'Polygon' && e.features[0].geometry.coordinates[0].length > 2) {
        let first = e.features[0].geometry.coordinates[0][0];
        let last = e.features[0].geometry.coordinates[0][e.features[0].geometry.coordinates[0].length - 1];
        if (first[0] == last[0] && first[1] == last[1]) {
          e.features[0].geometry.coordinates[0].pop();
        }
        e.features[0].geometry.coordinates = e.features[0].geometry.coordinates[0];
        e.features[0].properties.alarmType = 'outsideBoundary';
        e.features[0].properties.alarmDistance = 0;
      } else if (e.features[0].geometry.type == 'LineString') {
        e.features[0].properties.alarmType = 'nearBoundary';
        e.features[0].properties.alarmDistance = 1000;
      }
      // update the boundary in the database
      fetch('/api/workarea/', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(e.features[0])
      }).then(() => {
        FetchAndDrawAllBoundaries();
      });
    }

    function updateArea(e) {
      const data = draw.get(e.features[0].id)
      // convert polygon into something the api can work with
      if (data.geometry.type == 'Polygon' && data.geometry.coordinates[0].length > 2) {
        let first = data.geometry.coordinates[0][0];
        let last = data.geometry.coordinates[0][data.geometry.coordinates[0].length - 1];
        if (first[0] == last[0] && first[1] == last[1]) {
          data.geometry.coordinates[0].pop();
        }
        data.geometry.coordinates = data.geometry.coordinates[0];
      }
      // update the boundary in the database
      fetch('/api/workarea/' + e.features[0].id, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
      }).then(() => {
        FetchAndDrawAllBoundaries();
      });
    }

    function deleteArea(e) {
      const data = draw.get(e.features[0].id)
      // delete the boundary in the database
      fetch('/api/workarea/' + e.features[0].id, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json'
        }
      }).then(() => {
        FetchAndDrawAllBoundaries();
      });
      UpdateBoundaryMenu();
    }
    var bounds;
    var markers = {};

    // Smooth zoom and centre to fit all markers on the map
    function ZoomToFitMarkers() {
      bounds = new mapboxgl.LngLatBounds();
      for (var marker in markers) {
        bounds.extend(markers[marker].getLngLat());
      }
      map.fitBounds(bounds, { maxZoom: 18, padding: 100, duration: 1000 });
    }

    function addBoundaryMarker(data, latestCoordinates) {
      var size = 24;
      var markerColor = getMarkerColor(data.properties);
      const el = document.createElement('div');
      el.className = 'marker';
      el.style.width = size + 'px';
      el.style.height = size + 'px';
      el.style.color = 'black';
      // el.style.backgroundColor = markerColor;
      el.style.backgroundSize = '100%';
      el.style.borderRadius = '50%';
      const pulse = el.appendChild(document.createElement('div'));
      pulse.style.width = 'inherit';
      pulse.style.height = 'inherit';
      pulse.style.position = 'absolute';
      pulse.style.top = '0';
      pulse.style.left = '0';
      pulse.style.borderRadius = '50%';
      pulse.style.backgroundColor = '#3FB1CE';
      pulse.style.animation = 'pulse-ring 1s infinite';
      const icon = el.appendChild(document.createElement('div'));
      // icon.style.color = markerColor;
      icon.style.textAlign = 'center';
      icon.className = 'material-icons';
      icon.innerHTML = 'person';
      const id = el.appendChild(document.createElement('div'));
      id.style.minWidth = '24px';
      id.style.width = 'max-content';
      id.style.textAlign = 'center';
      id.innerHTML = data.id;
      id.style.color = 'black';
      id.style.fontSize = '18px';
      id.style.fontWeight = 'bold';
      id.style.textShadow = '-1px -1px 0 white, 1px -1px 0 white, -1px 1px 0 white, 1px 1px 0 white';
      id.style.transform = 'translate(0px, -250%)';

      const marker = new mapboxgl.Marker({ element: el })
        .setLngLat(latestCoordinates)
        .addTo(map)
        .setPopup(new mapboxgl.Popup())
      marker.data = data;
      marker.color = markerColor;
      return marker;
    }

    function addIconMarker(data) {
      var size = 24;
      var markerColor = getMarkerColor(data);
      const el = document.createElement('div');
      el.className = 'marker';
      el.style.width = size + 'px';
      el.style.height = size + 'px';
      el.style.color = 'black';
      // el.style.backgroundColor = markerColor;
      // el.style.backgroundImage = `url(https://picsum.photos/id/${data.deviceID}/${size}/${size})`;
      el.style.backgroundSize = '100%';
      el.style.borderRadius = '50%';
      const pulse = el.appendChild(document.createElement('div'));
      pulse.style.width = 'inherit';
      pulse.style.height = 'inherit';
      pulse.style.position = 'absolute';
      pulse.style.top = '0';
      pulse.style.left = '0';
      pulse.style.borderRadius = '50%';
      pulse.style.backgroundColor = markerColor;
      pulse.style.animation = 'pulse-ring 1s infinite';
      const icon = el.appendChild(document.createElement('div'));
      icon.style.textAlign = 'center';
      icon.className = 'material-icons';
      icon.innerHTML = 'person';
      const id = el.appendChild(document.createElement('div'));
      id.style.minWidth = '24px';
      id.style.width = 'max-content';
      id.style.textAlign = 'center';
      id.innerHTML = data.name;
      id.style.color = 'black';
      id.style.fontSize = '18px';
      id.style.fontWeight = 'bold';
      id.style.textShadow = '-1px -1px 0 white, 1px -1px 0 white, -1px 1px 0 white, 1px 1px 0 white';
      id.style.transform = 'translate(0px, -250%)';

      const marker = new mapboxgl.Marker({ element: el })
        .setLngLat([data.longitude, data.latitude])
        .addTo(map)
        .setPopup(new mapboxgl.Popup().setText(`${JSON.stringify(data)}`))
      marker.data = data;
      marker.color = markerColor;
      return marker;
    }

    function GetRandomHSV() {
      // generates a random hsv color
      goldern_ratio_conjugate = 0.618033988749895;
      h = Math.random();
      h += goldern_ratio_conjugate;
      h %= 1;
      return HsvToRgb(h, 0.5, 0.95);
    }

    function HsvToRgb(h, s, v) {
      // converts hsv to rgb
      var r, g, b, i, f, p, q, t;
      i = Math.floor(h * 6);
      f = h * 6 - i;
      p = v * (1 - s);
      q = v * (1 - f * s);
      t = v * (1 - (1 - f) * s);
      switch (i % 6) {
        case 0: r = v, g = t, b = p; break;
        case 1: r = q, g = v, b = p; break;
        case 2: r = p, g = v, b = t; break;
        case 3: r = p, g = q, b = v; break;
        case 4: r = t, g = p, b = v; break;
        case 5: r = v, g = p, b = q; break;
      }
      // return [r * 255, g * 255, b * 255];
      return `rgb(${r * 255}, ${g * 255}, ${b * 255})`;
    }

    var socket = io.connect('/');
    socket.on('connect', function () {
      console.log('Connected to server');
    });
    socket.on('location', function (data) {
      console.log(data);
      if (markers[data.deviceID]) {
        markers[data.deviceID].setLngLat([data.longitude, data.latitude]);
        markers[data.deviceID].getPopup().setText(`${JSON.stringify(data)}`);
        markers[data.deviceID].data = data;
        markers[data.deviceID].color = getMarkerColor(data);
        // markers[data.deviceID].getElement().style.backgroundColor = markers[data.deviceID].color;
        markers[data.deviceID].getElement().children[0].style.backgroundColor = markers[data.deviceID].color;
      } else {
        markers[data.deviceID] = addIconMarker(data);
      }
      // auto zoom if checkbox is checked everytime a marker is added or moved
      if (document.getElementById('autoZoom').checked) {
        ZoomToFitMarkers();
      }
      UpdateWorkersMenu();
    });
    socket.on('boundary', function (data) {
      var data = data;
      // data.geometry.type = 'LineString';
      var last_coordinates = data.geometry.coordinates[data.geometry.coordinates.length - 1]
      if (markers[data.id]) {
        markers[data.id].setLngLat(last_coordinates);
        markers[data.id].data = data;
        markers[data.id].color = getMarkerColor(data.properties);
        // markers[data.id].getElement().style.backgroundColor = markers[data.id].color;
        markers[data.id].getElement().children[0].style.backgroundColor = '#3FB1CE';
      } else {
        markers[data.id] = addBoundaryMarker(data, last_coordinates);
      }
      // auto zoom if checkbox is checked everytime a marker is added or moved
      if (document.getElementById('autoZoom').checked) {
        ZoomToFitMarkers();
      }
      if (data.geometry.coordinates.length >= 2) {
        // Make sure the polygon is closed
        if (data.geometry.type == 'Polygon' && data.geometry.coordinates[0] != last_coordinates) {
          data.geometry.coordinates[0].push(data.geometry.coordinates[0]);
        }
        draw.set({
          type: 'FeatureCollection',
          id: data.id,
          features: [data]
        });
        if (data.properties.alarmType == 'nearBoundary' && data.properties.alarmDistance > 0) {
          // create a visual boundary around the line
          var boundaryBuffer = turf.buffer(data, data.properties.alarmDistance / 1000, { units: 'meters' });
          boundaryBuffer.properties = { type: 'buffer' };
          draw.add({
            type: 'FeatureCollection',
            id: 'buffer',
            features: [boundaryBuffer]
          });
        }
      }
    });
    socket.on('$B', function (data) {
      draw.set({
        type: 'FeatureCollection',
        id: data.id,
        features: [data]
      });
    });

    // auto zoom on checkbox change for quality of life
    document.getElementById('autoZoom').addEventListener('change', function () {
      if (document.getElementById('autoZoom').checked && Object.keys(markers).length > 0) {
        ZoomToFitMarkers();
      }
    });

    function getMarkerColor(data) {
      if (data.status != '') {
        if (data.status == "N") { return 'red'; }
        else if (["E", "A", "D", "F"].includes(data.status)) { return 'orange'; }
        else if (data.status == "R") { return '#7bff29'; }
        else { return 'grey'; }
      } else if (data.quality !== null) {
        if (data.quality == 0) { return 'red'; }
        else if ([1, 2, 5, 6].includes(data.quality)) { return 'orange'; }
        else if (data.quality == 4) { return '#7bff29'; }
        else { return 'grey'; }
      } else {
        return 'grey';
      }
    }

    // Map type radio button event listener
    const inputs = document.getElementsByName('mapToggle');
    for (const input of inputs) {
      input.onclick = (layer) => {
        const layerId = layer.target.id;
        map.setStyle('mapbox://styles/mapbox/' + layerId);
      };
    }

    function toggleBurger() {
      var burgerSidebar = document.getElementById("burgerSidebar");
      if (burgerSidebar.style.display === "none") {
        document.getElementById("burgerSidebar").style.width = "300px";
        document.getElementById("burgerSidebar").style.display = "block";
        document.getElementsByClassName("map-legend")[0].style.display = "none";
        document.getElementsByClassName("map-legend")[1].style.display = "none";
      } else {
        document.getElementById("burgerSidebar").style.display = "none";
        document.getElementsByClassName("map-legend")[0].style.display = "block";
        document.getElementsByClassName("map-legend")[1].style.display = "block";
      }
    }

    function UpdateWorkersMenu() {
      // update the workers navigation panel
      const workers = document.getElementById('workers');
      workers.innerHTML = '';
      for (var k in markers) {
        const row = document.createElement('tr');
        row.innerHTML = `<td>${markers[k].data.name}</td><td>${new Date(markers[k].data.serverTime).toLocaleString('en-GB')}</td>`;
        row.title = `latitude: ${markers[k].data.latitude} longitude: ${markers[k].data.longitude} \r\nstatus: ${markers[k].data.status} || quality: ${markers[k].data.quality} || posMode: ${markers[k].data.posMode} || satellites: ${markers[k].data.satellites}`;
        row.className = 'menu-item';
        row.coordinates = [markers[k].data.longitude, markers[k].data.latitude];
        // change background color
        row.style.backgroundColor = markers[k].color;
        row.addEventListener('click', function (e) {
          // set the view to the worker
          map.flyTo({ center: e.currentTarget.coordinates, zoom: 25, duration: 1000 });
          document.getElementById('autoZoom').checked = false;
        });
        const moreBtn = row.appendChild(document.createElement('td'));
        moreBtn.className = 'material-icons';
        moreBtn.innerHTML = 'more_vert';
        moreBtn.style.cursor = 'pointer';
        moreBtn.deviceID = k;
        moreBtn.addEventListener('click', function (e) {
          const modal = document.getElementById('editModal');
          if (modal) { modal.remove(); }
          editModal(markers[e.currentTarget.deviceID].data);
        });
        workers.appendChild(row);
      };
    }

    function UpdateBoundaryMenu() {
      // get all map features
      const data = draw.getAll();
      // get the boundaries div
      const boundaries = document.getElementById('boundaries');
      // clear the boundaries div
      boundaries.innerHTML = '';
      // add each boundary to the boundaries div
      data.features.forEach(function (feature) {
        if (feature.properties.type.toUpperCase() == '$B') {
          const row = document.createElement('tr');
          row.innerHTML = `
            <td style="overflow: hidden;text-overflow: clip">${feature.id}</td>
            <td>${feature.properties.alarmType == 'nearBoundary' ? 'NB' : 'OB'}</td>
            <td>${feature.properties.alarmDistance / 1000} m</td>`;
          row.className = 'menu-item';
          row.addEventListener('click', function () {
            // set the view to the boundary
            map.fitBounds(turf.bbox(feature), { padding: 100, duration: 1000 });
            document.getElementById('autoZoom').checked = false;
          });
          const moreBtn = row.appendChild(document.createElement('td'));
          moreBtn.className = 'material-icons';
          moreBtn.innerHTML = 'more_vert';
          moreBtn.style.cursor = 'pointer';
          moreBtn.addEventListener('click', function (e) {
            const modal = document.getElementById('editModal');
            if (modal) { modal.remove(); }
            EditBoundary(feature.id);
          });
          boundaries.appendChild(row);
        }
      });
    }

    function EditBoundary(id) {
      // toggleBurger();
      // fetch boundary from /api/workarea/id
      fetch('/api/workarea/' + id)
        .then(response => response.json())
        .then(data => {
          editModal(data);
        });
    }

    function editModal(data) {
      // generate a modal to edit the boundary
      var modal = document.createElement('div');
      modal.className = 'modal';
      modal.id = 'editModal';
      modal.style.display = 'block';
      modal.style.position = 'fixed';
      modal.style.zIndex = '1';
      modal.style.paddingTop = '100px';
      modal.style.left = '0';
      modal.style.top = '0';
      modal.style.width = '100%';
      modal.style.height = '100%';
      modal.style.overflow = 'auto';
      modal.style.backgroundColor = 'rgb(0,0,0)';
      modal.style.backgroundColor = 'rgba(0,0,0,0.4)';
      if (data.type.toUpperCase() == '$P') {
        modal.innerHTML = `
        <div class="modal-content">
          <span class="material-icons right">close</span>
          <h2>Edit Worker</h2>
          <form id="editForm">
            <label for="deviceID">ID:</label><br>
            <input type="text" id="deviceID" name="deviceID" value="${data.deviceID}" disabled><br>
            <label for="name">Name:</label><br>
            <input type="text" id="name" name="name" value="${data.name}"><br>
            <label for="ipAddress">IP Address:</label><br>
            <input type="text" id="ipAddress" name="ipAddress" value="${data.ip_address}" disabled><br>
            <input type="submit" value="Submit">
          </form>
        </div>
        `;
      } else if (data.properties.type) {
        modal.innerHTML = `
        <div class="modal-content">
          <span class="material-icons right">close</span>
          <h2>Edit Boundary</h2>
          <form id="editForm">
            <label for="alarmType">Trigger alarm when:</label><br>
            <select id="alarmType" name="alarmType">
              <option value="nearBoundary" ${data.properties.alarmType == 'nearBoundary' ? 'selected' : ''}>Near Boundary</option>
              <option value="outsideBoundary" ${data.properties.alarmType == 'outsideBoundary' ? 'selected' : ''}>Outside Boundary</option>
            </select><br>
            <label for="alarmDistance">Alarm Distance (mm):</label><br>
            <input type="number" id="alarmDistance" name="alarmDistance" value="${data.properties.alarmDistance}"><br>
            <input type="submit" value="Submit">
          </form>
        </div>
        `;
      }
      document.getElementById('main').appendChild(modal);
      document.getElementById('editModal').children[0].children[0].addEventListener('click', function () {
        // remove the modal when the close button is clicked
        document.getElementById('editModal').remove();
      });
      document.getElementById('editForm').addEventListener('submit', function (e) {
        e.preventDefault();
        if (data.type.toUpperCase() == '$P') {
          // update the device in the database
          data.name = document.getElementById('name').value;
          fetch('/api/device/' + data.deviceID, {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
          }).then(() => {
            UpdateWorkersMenu();
            markers[data.deviceID].data = data;
            markers[data.deviceID].getElement().children[2].innerHTML = data.name;
          });
        }
        else if (data.properties.type) {
          // update the boundary in the database
          data.properties.alarmType = document.getElementById('alarmType').value;
          data.properties.alarmDistance = document.getElementById('alarmDistance').value;
          if (data.properties.alarmType == 'outsideBoundary' && data.geometry.coordinates.length > 2) {
            data.geometry.type = 'Polygon';
          } else if (data.properties.alarmType == 'nearBoundary' && data.geometry.coordinates.length >= 2) {
            data.geometry.type = 'LineString';
          }
          fetch('/api/workarea/' + data.id, {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
          }).then(() => {
            FetchAndDrawAllBoundaries();
          });
        }
        // close the modal
        document.getElementById('editModal').remove();
      });
    }

    function FetchAndDrawAllBoundaries() {
      draw.deleteAll()
      // fetch boundaries from /api/boundaries
      fetch('/api/workarea/')
        .then(response => response.json())
        .then(data => {
          console.log(data);
          data.features.forEach(function (feature) {
            if (feature.geometry.type == 'Polygon') {
              feature.geometry.coordinates.push(feature.geometry.coordinates[0]);
              feature.geometry.coordinates = [feature.geometry.coordinates];
            } else if (feature.properties.alarmType == 'nearBoundary' && feature.properties.alarmDistance > 0) {
              // create a visual boundary around the line
              var boundaryBuffer = turf.buffer(feature, feature.properties.alarmDistance / 1000, { units: 'meters' });
              boundaryBuffer.properties = { type: 'buffer' };
              draw.add({
                type: 'FeatureCollection',
                id: 'buffer',
                features: [boundaryBuffer]
              },);
            }
            draw.add({
              type: 'FeatureCollection',
              id: feature.id,
              features: [feature]
            });
          });
          UpdateBoundaryMenu();
        });
    }

  </script>
</body>

</html>